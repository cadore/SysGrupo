using EntitiesGrupo;
using PetaPoco;
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Windows.Forms;

namespace WcfLibGrupo
{
    public class ServiceGrupo : IServiceGrupo
    {
        #region db
        private static Database db = new Database("postgresql");
        #endregion

        #region Usuario
        public long salvarNovoUsuario(usuario obj, permicoes_usuario pu)
        {
            try
            {                
                using (var scope = usuario.repo.GetTransaction())
                {
                    obj.Save();
                    pu.id_usuarios = Convert.ToInt64(obj.id);
                    pu.Save();                    
                    scope.Complete();
                }
                return Convert.ToInt64(obj.id);
            }
            catch (Exception ex)
            {
                usuario.repo.AbortTransaction();

                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<usuario> listaDeUsuariosAtivos()
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("usuarios").Where("inativo = @0", "FALSE").OrderBy("id");
                return usuario.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<usuario> listaDeUsuariosAtivosPorId(long id)
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("usuarios").Where("id=@0", id).Where("inativo = @0", "FALSE").OrderBy("id");
                return usuario.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<usuario> listaDeUsuariosAtivosPorNomeOuLogin(string nome)
        {
            try
            {
                var sql = Sql.Builder.Append("SELECT * FROM usuarios WHERE nome_completo ILIKE @0 AND inativo = @1 " +
                "UNION SELECT * FROM usuarios WHERE login ILIKE @0 AND inativo = @1", "%" + nome + "%", "FALSE").OrderBy("id");
                return usuario.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public usuario recuperaUsuarioPorId(long id)
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("usuarios").Where("id=@0", id);
                return usuario.SingleOrDefault(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public int countUsuarioAtivoPorLogin(string login)
        {
            try
            {
                var sql = Sql.Builder.Select("COUNT(id)").From("usuarios").Where("login=@0", login);
                var count = db.SingleOrDefault<int>(sql);
                return Convert.ToInt32(count);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public bool countUsuarioAtivoPorLoginESenha(string login, string senha)
        {
            try
            {
                bool flag = false;
                var sql = Sql.Builder.Select("COUNT(id)").From("usuarios").Where("lower(login)=lower(@0)", login).Where("senha=@0", senha);
                int count =  Convert.ToInt32(db.SingleOrDefault<int>(sql));

                if(count==1){
                    flag = true;
                }
                else
                {
                    flag = false;
                }

                return flag;
            }
            catch (Exception ex)
            {                
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public permicoes_usuario recuperaPermicoesDoUsuarioPorIdUsuario(long id_usuario)
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("permicoes_usuarios").Where("id_usuarios=@0", id_usuario);
                return permicoes_usuario.SingleOrDefault(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }
        #endregion

        #region clientes
        public long salvarNovoCliente(cliente obj)
        {
            try
            {
                    obj.Save();
                return Convert.ToInt64(obj.id);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<cliente> listaDeTodosClientes()
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("cliente").OrderBy("id");
                return cliente.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<cliente> listaDeClientesPorInatividade(bool inativo)
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("cliente").Where("inativo = @0", inativo).OrderBy("id");
                return cliente.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<cliente> listaDeClientesPorId(long id)
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("cliente").Where("id=@0", id).OrderBy("id");
                return cliente.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        public List<cliente> listaDeClientesPorNomeOuDocumento(string nome_documento, bool inativo)
        {
            try
            {
                var sql = Sql.Builder.Append("SELECT * FROM cliente WHERE nome_completo ILIKE @0 AND inativo = @2"+
                " UNION SELECT * FROM cliente WHERE documento=@1 AND inativo = @2", "%" + nome_documento + "%", nome_documento, inativo);
                return cliente.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }
        #endregion

        #region fipe

        public List<usuario> listaDeUsuariosAtivos()
        {
            try
            {
                var sql = Sql.Builder.Select("*").From("usuarios").Where("inativo = @0", "FALSE").OrderBy("id");
                return usuario.Fetch(sql);
            }
            catch (Exception ex)
            {
                throw new FaultException(
                    new FaultReason(String.Format("EXCECÃO: {0}{1}INNER EXCEPTION: {2}", ex.Message, Environment.NewLine, ex.InnerException)),
                    new FaultCode("1000"));
            }
        }

        #endregion
    }
}
